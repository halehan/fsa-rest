package com.halehan.demo.rest.service;

import com.halehan.demo.rest.model.Patient;
import com.halehan.demo.rest.model.PatientCrudRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class PatientServiceImpl implements PatientService{

    @Autowired
    // This means to get the bean called patientRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    PatientCrudRepository patientRepository;

    @Transactional
    @Override
    public String updatePatient(Patient p, int id) {

        Optional<Patient> patientOptional = patientRepository.findById(id);
        String rtn = "Success";

        if (!patientOptional.isPresent())
            rtn =  "No User with id: " + id;

        try{
            patientOptional.ifPresent(patient -> {
                System.out.println("User's name = " + patient.getEmail());
                if (checkedValue(p.getEmail()))
                    patient.setEmail(p.getEmail());
                if (checkedValue(p.getFirstname()))
                    patient.setFirstname(p.getFirstname());
                if (checkedValue(p.getLastname()))
                    patient.setLastname(p.getLastname());
                if (checkedValue(p.getStatus()))
                    patient.setStatus(p.getStatus());
                if (checkedValue(p.getStudyeye()))
                    patient.setStudyeye(p.getStudyeye());

                patient.setId(Math.toIntExact(id));

                patientRepository.save(patient);
            });

        } catch (Exception ee) {
            rtn = "Failure: " + ee.getMessage();

        }

        return rtn;

    }

    public String addPatient(Patient newPatient) {

        System.out.println("/add Post " + newPatient.getEmail() +"\n" + newPatient.getLastname());
        Patient p = new Patient();
        p.setStudyid(newPatient.getStudyid());
        p.setFirstname(newPatient.getFirstname());
        p.setLastname(newPatient.getLastname());
        p.setEmail(newPatient.getEmail());
        String rtn = "Success: ";
        try{
            patientRepository.save(p);
            rtn += "Added id " + p.getId();
        } catch (DataAccessException e) {
            rtn = "Error: " + e.getMessage();
        }
        return rtn;
    }

    public Iterable<Patient> findByLastName(String lastName) {
        return patientRepository.findByLastname(lastName);
    }

    public  Iterable<Patient>  getAllPatients() {
        Iterable<Patient> patients = null;

        try {patients = patientRepository.findAll();}
        catch (Exception e) { }

        return patients;
    }

    public String deletePatient(int id) {
        String rtn = "success";
        try{
            patientRepository.deleteById(id);
        } catch (Exception e) {
            rtn = "Fail:  " +  e.getMessage();
        }
        return rtn;

    }

    private boolean checkedValue(String val) {
        return (val == null || val.isEmpty()) ? false : true;
    }
}
