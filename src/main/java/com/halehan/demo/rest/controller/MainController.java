package com.halehan.demo.rest.controller;

        import com.halehan.demo.rest.model.Patient;
        import com.halehan.demo.rest.model.PatientRepository;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.dao.DataAccessException;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.*;

        import java.util.Optional;
        import java.util.concurrent.atomic.AtomicReference;

@Controller // This means that this class is a Controller
@RequestMapping(path="/patient") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PatientRepository patientRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody Patient newPatient) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println("/add Post " + newPatient.getEmail() +"\n" + newPatient.getLastname());
        Patient p = new Patient();
        p.setStudyid(newPatient.getStudyid());
        p.setFirstname(newPatient.getFirstname());
        p.setLastName(newPatient.getLastname());
        p.setEmail(newPatient.getEmail());
        String rtn = "Success: ";
        try{
            patientRepository.save(p);
            rtn += "Added id " + p.getId();
        } catch (DataAccessException e) {
            rtn = "Error: " + e.getMessage();
        }
        return rtn;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Patient> getAllUsers() {
        // This returns a JSON or XML with the users
        return patientRepository.findAll();
    }

    @DeleteMapping("/{id}")
    public @ResponseBody String deleteStudent(@PathVariable long id) {
        String rtn = "success";
        try{
            patientRepository.deleteById(Math.toIntExact(id));
        } catch (Exception e) {
            rtn = "Fail:  " +  e.getMessage();
        }
       return rtn;
    }

    private boolean checkedValue(String val) {
        return (val == null || val.isEmpty()) ? false : true;
    }

    @PutMapping("/{id}")
    public @ResponseBody String updateStudent(@RequestBody Patient p, @PathVariable long id) {

        Optional<Patient> patientOptional = patientRepository.findById(Math.toIntExact(id));
        String rtn = "Success";

        if (!patientOptional.isPresent())
            rtn =  "No User with id: " + id;

        try{
            patientOptional.ifPresent(patient -> {
                System.out.println("User's name = " + patient.getEmail());
                if (checkedValue(p.getEmail()))
                    patient.setEmail(p.getEmail());
                if (checkedValue(p.getFirstname()))
                    patient.setFirstname(p.getFirstname());
                if (checkedValue(p.getLastname()))
                    patient.setLastName(p.getLastname());
                if (checkedValue(p.getStatus()))
                    patient.setStatus(p.getStatus());
                if (checkedValue(p.getStudyeye()))
                    patient.setStudyeye(p.getStudyeye());

                patient.setId(Math.toIntExact(id));

                patientRepository.save(patient);
            });

        } catch (Exception ee) {
            rtn = "Failure: " + ee.getMessage();

        }

        return rtn;
    }
}